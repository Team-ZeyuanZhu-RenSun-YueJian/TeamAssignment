
package UserInterface.TravelAgency;

import Business.Airliner.Airliner;
import Business.Airliner.Flight.Flight;
import Business.MasterTravelSchedule;
import Business.Ticket.TicketDirectory;
import Business.TravelAgency.TravelAgency;
import Business.TravelOffice.TravelOffice;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author SUNREN
 */
public class ManageMasterTravelSchedulJPanel extends javax.swing.JPanel {


    private JPanel cardSequenceJPanel;
    private TravelOffice travelOffice;
    private List<Flight> allFlightList;
    

    public ManageMasterTravelSchedulJPanel(TravelAgency travelAgency, JPanel cardSequenceJPanel) {
       initComponents();
        
        this.allFlightList = MasterTravelSchedule.getInstance().getAllFlightsOfAirliners();
        populateFlight(allFlightList);
        this.cardSequenceJPanel = cardSequenceJPanel;
        
        
        flightCombox.setModel(new DefaultComboBoxModel(allFlightList.toArray())); 
        
        List<String> departureList = new ArrayList<>();
        List<String> tempListD = new ArrayList<>();
        allFlightList.forEach(flight ->{
                    tempListD.add(flight.getDeparture());});
        Set<String> tempSet = tempListD.stream()
                .collect(Collectors.toSet());
        tempSet.forEach(a -> {
            departureList.add(a);
        });
        
        
        departLocationComBox.setModel(new DefaultComboBoxModel(departureList.toArray())); 
        
        List<String> arraivalList = new ArrayList<>();
        List<String> tempListA = new ArrayList<>();
        allFlightList.forEach(flight ->{
                    tempListA.add(flight.getDestination());});
        Set<String> tempSetA = tempListA.stream()
                .collect(Collectors.toSet());
        tempSetA.forEach(a -> {
            arraivalList.add(a);
        });
        
        ArrivalLocationComBox1.setModel(new DefaultComboBoxModel(arraivalList.toArray())); 
        
         List<String> dateList = new ArrayList<>();
        List<String> tempListDate = new ArrayList<>();
        allFlightList.forEach(flight ->{
                    tempListDate.add(flight.getDate());});
        Set<String> tempSetDate = tempListDate.stream()
                .collect(Collectors.toSet());
        tempSetDate.forEach(a -> {
            dateList.add(a);
        });
        
        dataComBox.setModel(new DefaultComboBoxModel(dateList.toArray())); 
        
        
        preferrenceComBox.setModel(new DefaultComboBoxModel(new String[]{"Morning","DayTime","Evening"}));
    }
    

public void populateFlight(List<Flight> flightList){
        DefaultTableModel dtm = (DefaultTableModel)flightJTable.getModel();
        dtm.setRowCount(0);
        
        flightList.forEach((Flight flight) -> {
            Object[] row = new Object[dtm.getColumnCount()];
            row[0] = flight;
            row[1] = flight.getAirplane().getSerialNum();
            row[2] = flight.getStartTime();
            row[3] = flight.getDeparture();
            row[4] = flight.getDestination();
            row[5] = flight.getDate();
            
            dtm.addRow(row);
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        findPreferBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        flightJTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        departLocationComBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        ArrivalLocationComBox1 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        preferrenceComBox = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        flightCombox = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        dataComBox = new javax.swing.JComboBox<>();
        dateRadioBtn = new javax.swing.JRadioButton();
        flightRadioBtn = new javax.swing.JRadioButton();
        departureRadioBtn = new javax.swing.JRadioButton();
        PreRadioBtn = new javax.swing.JRadioButton();
        ArrivalRadioBtn = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        findPreferBtn.setBackground(new java.awt.Color(255, 255, 255));
        findPreferBtn.setText("Find Preferred Flight");
        findPreferBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findPreferBtnActionPerformed(evt);
            }
        });

        flightJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Flight #", "Airplane #", "Time", "Departure", "Arrival", "Date"
            }
        ));
        jScrollPane1.setViewportView(flightJTable);

        jLabel3.setText("Departure:");

        departLocationComBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("Arrival:");

        ArrivalLocationComBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel5.setText("Preferrence:");

        preferrenceComBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setText("Flight #:");

        flightCombox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        flightCombox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flightComboxActionPerformed(evt);
            }
        });

        jLabel7.setText("Date:");

        backBtn.setBackground(new java.awt.Color(255, 255, 255));
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        dataComBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setText("View Travel Office");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 171, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(flightRadioBtn)
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(flightCombox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(39, 39, 39)
                        .addComponent(departureRadioBtn)
                        .addGap(9, 9, 9)
                        .addComponent(jLabel3)
                        .addGap(20, 20, 20)
                        .addComponent(departLocationComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(ArrivalRadioBtn)
                        .addGap(9, 9, 9)
                        .addComponent(jLabel4)
                        .addGap(2, 2, 2)
                        .addComponent(ArrivalLocationComBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dateRadioBtn)
                        .addGap(9, 9, 9)
                        .addComponent(jLabel7)
                        .addGap(0, 0, 0)
                        .addComponent(dataComBox, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(PreRadioBtn)
                        .addGap(9, 9, 9)
                        .addComponent(jLabel5)
                        .addGap(8, 8, 8)
                        .addComponent(preferrenceComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(300, 300, 300)
                        .addComponent(backBtn)
                        .addGap(31, 31, 31)
                        .addComponent(findPreferBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 171, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(392, 392, 392)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 69, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(flightRadioBtn)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(flightCombox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(departureRadioBtn)
                    .addComponent(jLabel3)
                    .addComponent(departLocationComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ArrivalRadioBtn)
                    .addComponent(jLabel4)
                    .addComponent(ArrivalLocationComBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateRadioBtn)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PreRadioBtn)
                    .addComponent(jLabel5)
                    .addComponent(preferrenceComBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backBtn)
                    .addComponent(findPreferBtn))
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 86, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void findPreferBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findPreferBtnActionPerformed

        if(flightRadioBtn.isSelected()){
            populateFlight(MasterTravelSchedule.getInstance().searchFlightsByFlightNum(flightCombox.getSelectedItem().toString()));
        }else if ((dateRadioBtn.isSelected())
            && (!departureRadioBtn.isSelected())
            && (!ArrivalRadioBtn.isSelected())
            && (!PreRadioBtn.isSelected())){
            populateFlight((List<Flight>) MasterTravelSchedule.getInstance().searchFlightByDate(this.allFlightList, dataComBox.getSelectedItem().toString()));
        }else if ((departureRadioBtn.isSelected())
            && (!dateRadioBtn.isSelected())
            && (!ArrivalRadioBtn.isSelected())
            && (!PreRadioBtn.isSelected())){
            populateFlight((List<Flight>) MasterTravelSchedule.getInstance().searchFlightByDeparture(this.allFlightList, departLocationComBox.getSelectedItem().toString()));
        }else if (ArrivalRadioBtn.isSelected()
            && (!departureRadioBtn.isSelected())
            && (!dateRadioBtn.isSelected())
            && (!PreRadioBtn.isSelected())){
            populateFlight((List<Flight>) MasterTravelSchedule.getInstance().searchFlightByArrival(this.allFlightList, ArrivalLocationComBox1.getSelectedItem().toString()));
        }else if (PreRadioBtn.isSelected()
            && (!departureRadioBtn.isSelected())
            && (!dateRadioBtn.isSelected())
            && (!ArrivalRadioBtn.isSelected())){
            populateFlight((List<Flight>) MasterTravelSchedule.getInstance().searchFlightByTimeRange(this.allFlightList, preferrenceComBox.getSelectedItem().toString()));
        }else if((dateRadioBtn.isSelected())
            && (departureRadioBtn.isSelected())
            && (!ArrivalRadioBtn.isSelected())
            && (!PreRadioBtn.isSelected())){
            List<Flight> searchList = MasterTravelSchedule.getInstance().searchFlightByDate(this.allFlightList, dataComBox.getSelectedItem().toString());
            populateFlight((List<Flight>) MasterTravelSchedule.getInstance().searchFlightByDeparture(searchList, departLocationComBox.getSelectedItem().toString()));
        }else if((dateRadioBtn.isSelected())
            && (!departureRadioBtn.isSelected())
            && (ArrivalRadioBtn.isSelected())
            && (!PreRadioBtn.isSelected())){
            List<Flight> searchList = MasterTravelSchedule.getInstance().searchFlightByDate(this.allFlightList, dataComBox.getSelectedItem().toString());
            populateFlight((List<Flight>) MasterTravelSchedule.getInstance().searchFlightByArrival(searchList, ArrivalLocationComBox1.getSelectedItem().toString()));
        }else if((dateRadioBtn.isSelected())
            && (!departureRadioBtn.isSelected())
            && (!ArrivalRadioBtn.isSelected())
            && (PreRadioBtn.isSelected())){
            List<Flight> searchList = MasterTravelSchedule.getInstance().searchFlightByDate(this.allFlightList, dataComBox.getSelectedItem().toString());
            populateFlight((List<Flight>) MasterTravelSchedule.getInstance().searchFlightByTimeRange(searchList, preferrenceComBox.getSelectedItem().toString()));
        }else if((!dateRadioBtn.isSelected())
            && (departureRadioBtn.isSelected())
            && (ArrivalRadioBtn.isSelected())
            && (!PreRadioBtn.isSelected())){
            List<Flight> searchList = MasterTravelSchedule.getInstance().searchFlightByDeparture(this.allFlightList, departLocationComBox.getSelectedItem().toString());
            populateFlight((List<Flight>) MasterTravelSchedule.getInstance().searchFlightByArrival(searchList, ArrivalLocationComBox1.getSelectedItem().toString()));
        }else if((!dateRadioBtn.isSelected())
            && (departureRadioBtn.isSelected())
            && (!ArrivalRadioBtn.isSelected())
            && (PreRadioBtn.isSelected())){
            List<Flight> searchList = MasterTravelSchedule.getInstance().searchFlightByDeparture(this.allFlightList, departLocationComBox.getSelectedItem().toString());
            populateFlight((List<Flight>) MasterTravelSchedule.getInstance().searchFlightByTimeRange(searchList, preferrenceComBox.getSelectedItem().toString()));
        }else if((!dateRadioBtn.isSelected())
            && (!departureRadioBtn.isSelected())
            && (ArrivalRadioBtn.isSelected())
            && (PreRadioBtn.isSelected())){
            List<Flight> searchList = MasterTravelSchedule.getInstance().searchFlightByArrival(this.allFlightList, ArrivalLocationComBox1.getSelectedItem().toString());
            populateFlight((List<Flight>) MasterTravelSchedule.getInstance().searchFlightByTimeRange(searchList, preferrenceComBox.getSelectedItem().toString()));
        }else if((!dateRadioBtn.isSelected())
            && (departureRadioBtn.isSelected())
            && (ArrivalRadioBtn.isSelected())
            && (PreRadioBtn.isSelected())){
            List<Flight> searchList1 = MasterTravelSchedule.getInstance().searchFlightByDeparture(this.allFlightList, departLocationComBox.getSelectedItem().toString());
            List<Flight> searchList2 = MasterTravelSchedule.getInstance().searchFlightByArrival(searchList1, ArrivalLocationComBox1.getSelectedItem().toString());
            populateFlight((List<Flight>) MasterTravelSchedule.getInstance().searchFlightByTimeRange(searchList2, preferrenceComBox.getSelectedItem().toString()));
        }else if((dateRadioBtn.isSelected())
            && (!departureRadioBtn.isSelected())
            && (ArrivalRadioBtn.isSelected())
            && (PreRadioBtn.isSelected())){
            List<Flight> searchList1 = MasterTravelSchedule.getInstance().searchFlightByDate(this.allFlightList, dataComBox.getSelectedItem().toString());
            List<Flight> searchList2 = MasterTravelSchedule.getInstance().searchFlightByArrival(searchList1, ArrivalLocationComBox1.getSelectedItem().toString());
            populateFlight((List<Flight>) MasterTravelSchedule.getInstance().searchFlightByTimeRange(searchList2, preferrenceComBox.getSelectedItem().toString()));
        }else if((dateRadioBtn.isSelected())
            && (departureRadioBtn.isSelected())
            && (!ArrivalRadioBtn.isSelected())
            && (PreRadioBtn.isSelected())){
            List<Flight> searchList1 = MasterTravelSchedule.getInstance().searchFlightByDate(this.allFlightList, dataComBox.getSelectedItem().toString());
            List<Flight> searchList2 = MasterTravelSchedule.getInstance().searchFlightByDeparture(searchList1, departLocationComBox.getSelectedItem().toString());
            populateFlight((List<Flight>) MasterTravelSchedule.getInstance().searchFlightByTimeRange(searchList2, preferrenceComBox.getSelectedItem().toString()));
        }else if((dateRadioBtn.isSelected())
            && (departureRadioBtn.isSelected())
            && (ArrivalRadioBtn.isSelected())
            && (!PreRadioBtn.isSelected())){
            List<Flight> searchList1 = MasterTravelSchedule.getInstance().searchFlightByDate(this.allFlightList, dataComBox.getSelectedItem().toString());
            List<Flight> searchList2 = MasterTravelSchedule.getInstance().searchFlightByDeparture(searchList1, departLocationComBox.getSelectedItem().toString());
            populateFlight((List<Flight>) MasterTravelSchedule.getInstance().searchFlightByArrival(searchList2, ArrivalLocationComBox1.getSelectedItem().toString()));
        }else if((dateRadioBtn.isSelected())
            && (departureRadioBtn.isSelected())
            && (ArrivalRadioBtn.isSelected())
            && (PreRadioBtn.isSelected())){
            List<Flight> searchList1 = MasterTravelSchedule.getInstance().searchFlightByDate(this.allFlightList, dataComBox.getSelectedItem().toString());
            List<Flight> searchList2 = MasterTravelSchedule.getInstance().searchFlightByDeparture(searchList1, departLocationComBox.getSelectedItem().toString());
            List<Flight> searchList3 = MasterTravelSchedule.getInstance().searchFlightByTimeRange(searchList2, preferrenceComBox.getSelectedItem().toString());
            populateFlight((List<Flight>) MasterTravelSchedule.getInstance().searchFlightByArrival(searchList3, ArrivalLocationComBox1.getSelectedItem().toString()));
        }
    }//GEN-LAST:event_findPreferBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        cardSequenceJPanel.remove(this);
        CardLayout layout = (CardLayout) cardSequenceJPanel.getLayout();
        layout.previous(cardSequenceJPanel);
    }//GEN-LAST:event_backBtnActionPerformed

    private void flightComboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flightComboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_flightComboxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ArrivalLocationComBox1;
    private javax.swing.JRadioButton ArrivalRadioBtn;
    private javax.swing.JRadioButton PreRadioBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JComboBox<String> dataComBox;
    private javax.swing.JRadioButton dateRadioBtn;
    private javax.swing.JComboBox<String> departLocationComBox;
    private javax.swing.JRadioButton departureRadioBtn;
    private javax.swing.JButton findPreferBtn;
    private javax.swing.JComboBox<String> flightCombox;
    private javax.swing.JTable flightJTable;
    private javax.swing.JRadioButton flightRadioBtn;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> preferrenceComBox;
    // End of variables declaration//GEN-END:variables
}
